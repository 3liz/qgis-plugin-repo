name: Run tests and release

on:
  push:
    tags: "*"
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  # PROJECT_FOLDER: "qgis_plugin_repo"
  PYTHON_VERSION: 3.8

jobs:
  tests:
    name: "ðŸŽ³ Tests"
    runs-on: ubuntu-latest

    steps:
    - name: Get source code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python requirements
      run: |
        python -m pip install -U pip setuptools wheel
        pip install -r requirements.txt

    - name: Run tests
      working-directory: tests
      run: |
        export PYTHONPATH="${{ github.workspace }}"
        python -m unittest

  release:
    name: "ðŸš€ Release"
    runs-on: ubuntu-20.04
    needs: [tests]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Get source code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Setup
      run: |
        VERSION=${GITHUB_REF:-0.0.0}
        VERSION=${VERSION##*/}
        sed -i "s/__VERSION__/${VERSION}/g" setup.py

    - name: Build package
      run: |
        python setup.py sdist

    - name: Debug
      run: |
        ls -al dist

    - name: Create release on GitHub
      uses: ncipollo/release-action@v1.8.4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        allowUpdates: true
        artifacts: "dist/*.tar.gz"
        # tag_name: ${{ github.ref }}
        # release_name: ${{ github.ref }}
        # body_path: release.md

#    - name: Deploy to PyPI
#      uses: pypa/gh-action-pypi-publish@master
#      with:
#        user: __token__
#        password: ${{ secrets.PYPI_API_TOKEN }}

#
#      - name: Upload Release Asset
#        id: upload-release-asset
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
#          asset_path: ./my-artifact.zip
#          asset_name: my-artifact.zip
#          asset_content_type: application/zip
